# Generated by Django 4.2.7 on 2023-11-29 07:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("category_id", models.AutoField(primary_key=True, serialize=False)),
                ("category_name", models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                ("product_no", models.AutoField(primary_key=True, serialize=False)),
                ("product_name", models.CharField(max_length=50)),
                ("product_price", models.IntegerField(default=0)),
                ("is_option", models.BooleanField(default=True)),
                ("product_date", models.DateField(auto_now_add=True)),
                ("product_thumnail", models.ImageField(upload_to="product_thumnails/")),
                ("product_description", models.TextField(verbose_name=1000)),
                ("is_display", models.BooleanField(default=True)),
                ("is_for_sale", models.BooleanField(default=True)),
                ("sales_volume", models.IntegerField(default=0)),
                (
                    "category_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.category"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="product_images/")),
            ],
        ),
        migrations.CreateModel(
            name="Stock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories",
                        to="main.product",
                    ),
                ),
                (
                    "product_no",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stocks",
                        to="main.product",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="product_images",
            field=models.ManyToManyField(
                related_name="product_images", to="main.productimage"
            ),
        ),
        migrations.CreateModel(
            name="OptionList",
            fields=[
                ("option_no", models.AutoField(primary_key=True, serialize=False)),
                ("option_name", models.CharField(max_length=20)),
                ("option_value", models.CharField(max_length=20)),
                ("option_amount", models.IntegerField(default=0)),
                (
                    "product_no",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="main.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("user_no", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "username",
                    models.CharField(max_length=20, unique=True, verbose_name="사용자 이름"),
                ),
                ("password", models.CharField(max_length=128, verbose_name="비밀번호")),
                (
                    "email",
                    models.EmailField(
                        max_length=100, unique=True, verbose_name="사용자 계정"
                    ),
                ),
                ("user_phone", models.CharField(max_length=11, unique=True)),
                ("zip_code", models.IntegerField(blank=True, null=True)),
                (
                    "user_address",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("user_point", models.IntegerField(default=0)),
                ("email_check", models.CharField(blank=True, max_length=5, null=True)),
                ("user_type", models.IntegerField(blank=True, default=0)),
                ("sub_date", models.DateTimeField(auto_now_add=True)),
                ("grade", models.CharField(default="Bronze", max_length=20)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
